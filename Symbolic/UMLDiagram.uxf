<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=18
fontfamily=Monospaced //possible: SansSerif,Serif,Monospaced

//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>620</x>
      <y>0</y>
      <w>490</w>
      <h>540</h>
    </coordinates>
    <panel_attributes>Fraction

--

- num: int
- den: int

--

- simplify(): void

+ operator + - * /(const Fraction&amp;): Fraction
+ operator == &gt; &lt; &gt;= &lt;=(const Fraction&amp;): bool
+ operator += -= *= /=(const Fraction&amp;): Fraction

+ operator + - * /(int): Fraction
+ operator == &gt; &lt; &gt;= &lt;=(int): bool
+ operator += -= *= /=(int): Fraction

+ operator -(): Fraction
+ operator ++ --(): Fraction&amp; // 前置 ++f
+ operator ++ --(): Fraction // 后置 f++

+ operator double(): double
+ toString(): std::string

&lt;&lt;friend&gt;&gt;
operator\&lt;&lt;(ostream&amp;, const Fraction&amp;): ostream&amp;
operator + - * /(int, const Fraction&amp;): Fraction
operator == &gt; &lt; &gt;= &lt;=(int, const Fraction&amp;): bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1150</x>
      <y>0</y>
      <w>520</w>
      <h>540</h>
    </coordinates>
    <panel_attributes>Vector

--

- elements: vector&lt;Fraction&gt;
+ size: vector&lt;Fraction&gt;::size_type

--

+ append(const Vector&amp;): Vector&amp;
+ append(const Fraction&amp;): Vector&amp;

+ operator [](size_type): Fraction&amp;
+ operator ==(const Vector&amp;): bool

+ toString(): std::string

+ operator + -(const Vector&amp;): Vector
+ operator * /(const Fraction&amp;): Vector
+ operator *(const Vector&amp;): Fraction

+ length(): double

+ isVerticalTo(const Vector&amp;): bool
+ isParallelTo(const Vector&amp;): bool

+ unitization(): Vector

&lt;&lt;friend&gt;&gt;
operator\&lt;&lt;(ostream&amp;, const Vector&amp;): std::ostream&amp;
operator*(const Fraction&amp; f, const Vector&amp; v): Vector
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1710</x>
      <y>0</y>
      <w>510</w>
      <h>540</h>
    </coordinates>
    <panel_attributes>Matrix

--

- cols: vector&lt;Vector&gt;
- size: 
    struct {
      row: vector&lt;Vector&gt;::size_type,
      col: vector&lt;Vector&gt;::size_type}

--

+ operator + - *(const Matrix&amp;): Matrix
+ operator *(const Fraction&amp;): Matrix
+ transpose(): Matrix
//{return new Matrix}
+ rank(): size_type

&lt;&lt;friend&gt;&gt;
operator\&lt;&lt;(ostream&amp;, const Matrix&amp;): std::ostream&amp;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1710</x>
      <y>580</y>
      <w>510</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>SquareMatrix

--

--

+ determinant(): Fraction
+ inverse(): SquareMatrix
+ eigenValue(): Fraction
+ adjugateMatrix(): SquareMatrix</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1860</x>
      <y>530</y>
      <w>30</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1100</x>
      <y>170</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
fg=black
bg=black</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1660</x>
      <y>170</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
fg=black
bg=black</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>620</x>
      <y>590</y>
      <w>700</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>bg=white
--
如果用C语言追求性能的话：

1. 以列存储要快一些

2. Strassen算法做矩阵乘法时间复杂度小于O(N^3)
   大概是O(N^2.81)左右

3. 寄存器优化

4. 嵌入汇编</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>320</y>
      <w>330</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Real

--

- list&lt;Item&gt; poly; // polynomial of Item
- int size;

--

- void simplify();</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>60</x>
      <y>590</y>
      <w>340</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Item

--

- coef: Fraction
- rational: int
- power: Fraction

--

- simplify(): void</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
